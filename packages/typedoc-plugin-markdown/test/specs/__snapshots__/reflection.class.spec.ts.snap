// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Class Reflection should compile abstract class: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: \`abstract\` AbstractClass

## Extended by

- [\`DerivedClassA\`](DerivedClassA.md)
- [\`DerivedClassB\`](DerivedClassB.md)

## Constructors

### new AbstractClass()

> **new AbstractClass**(): [\`AbstractClass\`](AbstractClass.md)

#### Returns

[\`AbstractClass\`](AbstractClass.md)

## Properties

### abstractProp

> \`abstract\` **abstractProp**: \`string\`

Comments for abstractProp

#### Source

[classes.ts:1](http://source-url)

## Methods

### abstractMethod()

> \`abstract\` **abstractMethod**(): \`string\`

Comments for abstractMethod

#### Returns

\`string\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile abstract class: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Class: \`abstract\` AbstractClass

## Extended by

- [\`DerivedClassA\`](DerivedClassA.md)
- [\`DerivedClassB\`](DerivedClassB.md)

## Constructors

### new AbstractClass()

\`\`\`ts
new AbstractClass(): AbstractClass
\`\`\`

#### Returns

[\`AbstractClass\`](AbstractClass.md)

## Properties

| Property | Modifier | Type | Description |
| :------ | :------ | :------ | :------ |
| \`abstractProp\` | \`abstract\` | \`string\` | Comments for abstractProp |

## Methods

### abstractMethod()

\`\`\`ts
abstract abstractMethod(): string
\`\`\`

Comments for abstractMethod

#### Returns

\`string\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile basic class: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: BasicClass

Comments for BasicClass

## Constructors

### new BasicClass()

> **new BasicClass**(): [\`BasicClass\`](BasicClass.md)

#### Returns

[\`BasicClass\`](BasicClass.md)

## Properties

### prop

> **prop**: \`string\`

Comments for prop

#### Source

[classes.ts:1](http://source-url)

## Methods

### method()

> **method**(): \`string\`

Comments for method

#### Returns

\`string\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile basic class: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Class: BasicClass

Comments for BasicClass

## Constructors

### new BasicClass()

\`\`\`ts
new BasicClass(): BasicClass
\`\`\`

#### Returns

[\`BasicClass\`](BasicClass.md)

## Properties

| Property | Type | Description |
| :------ | :------ | :------ |
| \`prop\` | \`string\` | Comments for prop |

## Methods

### method()

\`\`\`ts
method(): string
\`\`\`

Comments for method

#### Returns

\`string\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with accessor keywords: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithAccessorKeywords

## Constructors

### new ClassWithAccessorKeywords()

> **new ClassWithAccessorKeywords**(): [\`ClassWithAccessorKeywords\`](ClassWithAccessorKeywords.md)

#### Returns

[\`ClassWithAccessorKeywords\`](ClassWithAccessorKeywords.md)

## Accessors

### accessor1

Accessor comments

#### Example

\`\`\`ts
const x = 1;
\`\`\`

#### Source

[classes.ts:1](http://source-url)

***

### accessor2

Accessor comments

#### Remarks

Remark comments

#### Source

[classes.ts:1](http://source-url)

***

### accessor3

Accessor comments

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with accessors: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithAccessors

Comments for ClassWithAccessors

## Constructors

### new ClassWithAccessors()

> **new ClassWithAccessors**(): [\`ClassWithAccessors\`](ClassWithAccessors.md)

#### Returns

[\`ClassWithAccessors\`](ClassWithAccessors.md)

## Properties

### privateProp

> \`private\` **privateProp**: \`string\`

#### Source

[classes.ts:1](http://source-url)

## Accessors

### accessor

#### Get Signature

> **get** **accessor**(): \`string\`

Comments for getter

##### Returns

\`string\`

#### Set Signature

> **set** **accessor**(\`value\`): \`void\`

Comments for setter

##### Parameters

###### value

\`string\`

Param comments

##### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

***

### noGetter

#### Set Signature

> **set** **noGetter**(\`x\`): \`void\`

##### Parameters

###### x

\`string\`

##### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

***

### noSetter

#### Get Signature

> **get** **noSetter**(): \`string\`

##### Returns

\`string\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with accessors: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Class: ClassWithAccessors

Comments for ClassWithAccessors

## Constructors

### new ClassWithAccessors()

\`\`\`ts
new ClassWithAccessors(): ClassWithAccessors
\`\`\`

#### Returns

[\`ClassWithAccessors\`](ClassWithAccessors.md)

## Properties

| Property | Modifier | Type |
| :------ | :------ | :------ |
| \`privateProp\` | \`private\` | \`string\` |

## Accessors

### accessor

#### Get Signature

\`\`\`ts
get accessor(): string
\`\`\`

Comments for getter

##### Returns

\`string\`

#### Set Signature

\`\`\`ts
set accessor(value: string): void
\`\`\`

Comments for setter

##### Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`value\` | \`string\` | Param comments |

##### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

***

### noGetter

#### Set Signature

\`\`\`ts
set noGetter(x: string): void
\`\`\`

##### Parameters

| Parameter | Type |
| :------ | :------ |
| \`x\` | \`string\` |

##### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

***

### noSetter

#### Get Signature

\`\`\`ts
get noSetter(): string
\`\`\`

##### Returns

\`string\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with complex props: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithComplexProps

Comments for ClassWithComplexProps

## Constructors

### new ClassWithComplexProps()

> **new ClassWithComplexProps**(): [\`ClassWithComplexProps\`](ClassWithComplexProps.md)

#### Returns

[\`ClassWithComplexProps\`](ClassWithComplexProps.md)

## Properties

### objecLiteralProp

> **objecLiteralProp**: \`object\`

#### someFunction()

> **someFunction**: (\`a\`) => \`string\`

Comments for someFunction

##### Parameters

###### a

\`string\`

##### Returns

\`string\`

#### someProp

> **someProp**: \`string\` = \`'someProp'\`

Comments for someProp

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with complex props: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Class: ClassWithComplexProps

Comments for ClassWithComplexProps

## Constructors

### new ClassWithComplexProps()

\`\`\`ts
new ClassWithComplexProps(): ClassWithComplexProps
\`\`\`

#### Returns

[\`ClassWithComplexProps\`](ClassWithComplexProps.md)

## Properties

| Property | Type | Description |
| :------ | :------ | :------ |
| \`objecLiteralProp\` | \`object\` | - |
| \`objecLiteralProp.someFunction\` | (\`a\`: \`string\`) => \`string\` | Comments for someFunction |
| \`objecLiteralProp.someProp\` | \`string\` | Comments for someProp |
"
`;

exports[`Class Reflection should compile class with constructor overloads: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithConstructorOverloads

Comments for ClassWithConstructorOverloads

## Constructors

### new ClassWithConstructorOverloads()

> **new ClassWithConstructorOverloads**(\`x\`, \`y\`): [\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Parameters

##### x

\`number\`

Comments for x number

##### y

\`string\`

#### Returns

[\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Source

[classes.ts:1](http://source-url)

### new ClassWithConstructorOverloads()

> **new ClassWithConstructorOverloads**(\`x\`): [\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Parameters

##### x

\`string\`

Comments for x string

#### Returns

[\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Source

[classes.ts:1](http://source-url)

### new ClassWithConstructorOverloads()

> **new ClassWithConstructorOverloads**(\`s\`): [\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Parameters

##### s

\`string\`

#### Returns

[\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with constructor overloads: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Class: ClassWithConstructorOverloads

Comments for ClassWithConstructorOverloads

## Constructors

### new ClassWithConstructorOverloads()

\`\`\`ts
new ClassWithConstructorOverloads(x: number, y: string): ClassWithConstructorOverloads
\`\`\`

#### Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`x\` | \`number\` | Comments for x number |
| \`y\` | \`string\` |  |

#### Returns

[\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Source

[classes.ts:1](http://source-url)

### new ClassWithConstructorOverloads()

\`\`\`ts
new ClassWithConstructorOverloads(x: string): ClassWithConstructorOverloads
\`\`\`

#### Parameters

| Parameter | Type | Description |
| :------ | :------ | :------ |
| \`x\` | \`string\` | Comments for x string |

#### Returns

[\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Source

[classes.ts:1](http://source-url)

### new ClassWithConstructorOverloads()

\`\`\`ts
new ClassWithConstructorOverloads(s: string): ClassWithConstructorOverloads
\`\`\`

#### Parameters

| Parameter | Type |
| :------ | :------ |
| \`s\` | \`string\` |

#### Returns

[\`ClassWithConstructorOverloads\`](ClassWithConstructorOverloads.md)

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with flags: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithFlags

Comment for ClassWithFlags

## Constructors

### new ClassWithFlags()

> **new ClassWithFlags**(): [\`ClassWithFlags\`](ClassWithFlags.md)

#### Returns

[\`ClassWithFlags\`](ClassWithFlags.md)

## Properties

### expermintalProp

> **expermintalProp**: \`string\`

**\`Experimental\`**

#### Source

[classes.ts:1](http://source-url)

***

### internalProp

> \`private\` **internalProp**: \`string\`

**\`Internal\`**

#### Source

[classes.ts:1](http://source-url)

## Methods

### expermintalMethod()

> **expermintalMethod**(): \`void\`

**\`Experimental\`**

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

***

### internalMethod()

> \`protected\` **internalMethod**(): \`void\`

**\`Internal\`**

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with flags: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Class: ClassWithFlags

Comment for ClassWithFlags

## Constructors

### new ClassWithFlags()

\`\`\`ts
new ClassWithFlags(): ClassWithFlags
\`\`\`

#### Returns

[\`ClassWithFlags\`](ClassWithFlags.md)

## Properties

| Property | Modifier | Type | Description |
| :------ | :------ | :------ | :------ |
| \`expermintalProp\` | \`public\` | \`string\` | **\`Experimental\`** |
| \`internalProp\` | \`private\` | \`string\` | **\`Internal\`** |

## Methods

### expermintalMethod()

\`\`\`ts
expermintalMethod(): void
\`\`\`

**\`Experimental\`**

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

***

### internalMethod()

\`\`\`ts
protected internalMethod(): void
\`\`\`

**\`Internal\`**

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with modifiers: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: \`abstract\` ClassWithModifiers

Comments for ClassWithModifiers

## Constructors

### new ClassWithModifiers()

> **new ClassWithModifiers**(): [\`ClassWithModifiers\`](ClassWithModifiers.md)

#### Returns

[\`ClassWithModifiers\`](ClassWithModifiers.md)

## Properties

### privateProp

> \`private\` **privateProp**: \`string\`

Comments for privateProp

#### Source

[classes.ts:1](http://source-url)

***

### protectedProp

> \`protected\` **protectedProp**: \`string\`

Comments for protectedProp

#### Source

[classes.ts:1](http://source-url)

***

### publicPropWithDefault

> **publicPropWithDefault**: \`string\` = \`'propWithDefault'\`

Comments for propWithDefault

#### Source

[classes.ts:1](http://source-url)

***

### readonlyProp

> \`readonly\` **readonlyProp**: \`string\`

Comments for abstractProperty

#### Source

[classes.ts:1](http://source-url)

***

### staticProp

> \`static\` **staticProp**: \`string\`

Comments for staticProp

#### Source

[classes.ts:1](http://source-url)

## Methods

### privateMethod()

> \`private\` **privateMethod**(): \`void\`

Comment for privateMethod

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

***

### publicMethod()

> **publicMethod**(): \`void\`

Comment for publicMethod

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

***

### staticMethod()

> \`static\` **staticMethod**(): \`void\`

Comment for staticMethod

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with modifiers: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Class: \`abstract\` ClassWithModifiers

Comments for ClassWithModifiers

## Constructors

### new ClassWithModifiers()

\`\`\`ts
new ClassWithModifiers(): ClassWithModifiers
\`\`\`

#### Returns

[\`ClassWithModifiers\`](ClassWithModifiers.md)

## Properties

| Property | Modifier | Type | Default value | Description |
| :------ | :------ | :------ | :------ | :------ |
| \`privateProp\` | \`private\` | \`string\` | \`undefined\` | Comments for privateProp |
| \`protectedProp\` | \`protected\` | \`string\` | \`undefined\` | Comments for protectedProp |
| \`publicPropWithDefault\` | \`public\` | \`string\` | \`'propWithDefault'\` | Comments for propWithDefault |
| \`readonlyProp\` | \`readonly\` | \`string\` | \`undefined\` | Comments for abstractProperty |
| \`staticProp\` | \`static\` | \`string\` | \`undefined\` | Comments for staticProp |

## Methods

### privateMethod()

\`\`\`ts
private privateMethod(): void
\`\`\`

Comment for privateMethod

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

***

### publicMethod()

\`\`\`ts
publicMethod(): void
\`\`\`

Comment for publicMethod

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

***

### staticMethod()

\`\`\`ts
static staticMethod(): void
\`\`\`

Comment for staticMethod

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with prop categories: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithPropCategories

## Constructors

### new ClassWithPropCategories()

> **new ClassWithPropCategories**(\`opts\`): [\`ClassWithPropCategories\`](ClassWithPropCategories.md)

#### Parameters

##### opts

###### a

\`string\`

###### b

\`string\`

#### Returns

[\`ClassWithPropCategories\`](ClassWithPropCategories.md)

#### Source

[classes.ts:1](http://source-url)

## CatA

### prop1

> **prop1**: \`string\`

#### Source

[classes.ts:1](http://source-url)

## CatB

### prop2

> **prop2**: \`string\`

#### Source

[classes.ts:1](http://source-url)

## Other

### method1()

> **method1**(): \`void\`

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

***

### method2()

> **method2**(): \`void\`

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with simple props: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithSimpleProps

Comments for ClassWithSimpleProps

## Constructors

### new ClassWithSimpleProps()

> **new ClassWithSimpleProps**(): [\`ClassWithSimpleProps\`](ClassWithSimpleProps.md)

#### Returns

[\`ClassWithSimpleProps\`](ClassWithSimpleProps.md)

## Properties

### propA

> **propA**: \`string\` = \`'propAValue'\`

Comments for propA

#### Source

[classes.ts:1](http://source-url)

***

### propB

> **propB**: \`string\` = \`'propBValue'\`

Comments for propB

#### Default Value

\`\`\`ts
'propBDefaultValue'
\`\`\`

#### Source

[classes.ts:1](http://source-url)

***

### propC

> **propC**: \`string\`

Comments for propB
on two lines

#### Default Value

\`\`\`ts
'propCDefaultValue'
\`\`\`

#### Source

[classes.ts:1](http://source-url)

***

### propD

> **propD**: \`string\`

Comments for propE

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with simple props: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Class: ClassWithSimpleProps

Comments for ClassWithSimpleProps

## Constructors

### new ClassWithSimpleProps()

\`\`\`ts
new ClassWithSimpleProps(): ClassWithSimpleProps
\`\`\`

#### Returns

[\`ClassWithSimpleProps\`](ClassWithSimpleProps.md)

## Properties

| Property | Type | Default value | Description |
| :------ | :------ | :------ | :------ |
| \`propA\` | \`string\` | \`'propAValue'\` | Comments for propA |
| \`propB\` | \`string\` | \`'propBDefaultValue'\` | Comments for propB |
| \`propC\` | \`string\` | \`'propCDefaultValue'\` | Comments for propB on two lines |
| \`propD\` | \`string\` | \`undefined\` | Comments for propE |
"
`;

exports[`Class Reflection should compile class with symbols: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithSymbols

## Constructors

### new ClassWithSymbols()

> **new ClassWithSymbols**(): [\`ClassWithSymbols\`](ClassWithSymbols.md)

#### Returns

[\`ClassWithSymbols\`](ClassWithSymbols.md)

## Properties

### \\[symbolConst\\]()?

> \`static\` \`optional\` **\\[symbolConst\\]**: () => \`void\`

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

## Methods

### \\[dispose\\]()

> **\\[dispose\\]**(): \`void\`

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile class with type parameters: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithTypeParameters\\<A, B, C\\>

Comments for ClassWithTypeParameters

## Type Parameters

• **A**

• **B** *extends* \`string\`

Comments for param B

• **C** = \`boolean\`

Comments for param C

## Constructors

### new ClassWithTypeParameters()

> **new ClassWithTypeParameters**\\<\`A\`, \`B\`, \`C\`\\>(): [\`ClassWithTypeParameters\`](ClassWithTypeParameters.md)\\<\`A\`, \`B\`, \`C\`\\>

#### Returns

[\`ClassWithTypeParameters\`](ClassWithTypeParameters.md)\\<\`A\`, \`B\`, \`C\`\\>
"
`;

exports[`Class Reflection should compile class with type parameters: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Class: ClassWithTypeParameters\\<A, B, C\\>

Comments for ClassWithTypeParameters

## Type Parameters

| Type Parameter | Default type | Description |
| :------ | :------ | :------ |
| \`A\` | - | - |
| \`B\` *extends* \`string\` | - | Comments for param B |
| \`C\` | \`boolean\` | Comments for param C |

## Constructors

### new ClassWithTypeParameters()

\`\`\`ts
new ClassWithTypeParameters<A, B, C>(): ClassWithTypeParameters<A, B, C>
\`\`\`

#### Returns

[\`ClassWithTypeParameters\`](ClassWithTypeParameters.md)\\<\`A\`, \`B\`, \`C\`\\>
"
`;

exports[`Class Reflection should compile class without prop categories: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ClassWithoutPropCategories

## Constructors

### new ClassWithoutPropCategories()

> **new ClassWithoutPropCategories**(\`opts\`): [\`ClassWithoutPropCategories\`](ClassWithoutPropCategories.md)

#### Parameters

##### opts

###### a

\`string\`

###### b

\`string\`

#### Returns

[\`ClassWithoutPropCategories\`](ClassWithoutPropCategories.md)

#### Source

[classes.ts:1](http://source-url)

## Properties

### prop1

> **prop1**: \`string\`

#### Source

[classes.ts:1](http://source-url)

***

### prop2

> **prop2**: \`string\`

#### Source

[classes.ts:1](http://source-url)

## Methods

### method1()

> **method1**(): \`void\`

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)

***

### method2()

> **method2**(): \`void\`

#### Returns

\`void\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile derived class: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: DerivedClassA

Comments for DerivedClassA

## Extends

- [\`AbstractClass\`](AbstractClass.md)

## Constructors

### new DerivedClassA()

> **new DerivedClassA**(): [\`DerivedClassA\`](DerivedClassA.md)

#### Returns

[\`DerivedClassA\`](DerivedClassA.md)

#### Inherited from

[\`AbstractClass\`](AbstractClass.md).[\`constructor\`](AbstractClass.md#constructors)

## Properties

### abstractProp

> **abstractProp**: \`string\` = \`'abstractProp'\`

Comments for abstractProp

#### Overrides

[\`AbstractClass\`](AbstractClass.md).[\`abstractProp\`](AbstractClass.md#abstractprop)

#### Source

[classes.ts:1](http://source-url)

***

### derivedProp

> **derivedProp**: \`string\`

#### Source

[classes.ts:1](http://source-url)

## Methods

### abstractMethod()

> **abstractMethod**(): \`string\`

Comments for abstractMethod

#### Returns

\`string\`

#### Overrides

[\`AbstractClass\`](AbstractClass.md).[\`abstractMethod\`](AbstractClass.md#abstractmethod)

#### Source

[classes.ts:1](http://source-url)

***

### derivedMethod()

> **derivedMethod**(): \`string\`

#### Returns

\`string\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile derived class: (Output File Strategy "members") (Option Group "2") 1`] = `
"# Class: DerivedClassA

Comments for DerivedClassA

## Extends

- [\`AbstractClass\`](AbstractClass.md)

## Constructors

### new DerivedClassA()

\`\`\`ts
new DerivedClassA(): DerivedClassA
\`\`\`

#### Returns

[\`DerivedClassA\`](DerivedClassA.md)

#### Inherited from

[\`AbstractClass\`](AbstractClass.md).[\`constructor\`](AbstractClass.md#constructors)

## Properties

| Property | Type | Default value | Description | Overrides |
| :------ | :------ | :------ | :------ | :------ |
| \`abstractProp\` | \`string\` | \`'abstractProp'\` | Comments for abstractProp | [\`AbstractClass\`](AbstractClass.md).\`abstractProp\` |
| \`derivedProp\` | \`string\` | \`undefined\` | - | - |

## Methods

### abstractMethod()

\`\`\`ts
abstractMethod(): string
\`\`\`

Comments for abstractMethod

#### Returns

\`string\`

#### Overrides

[\`AbstractClass\`](AbstractClass.md).[\`abstractMethod\`](AbstractClass.md#abstractmethod)

#### Source

[classes.ts:1](http://source-url)

***

### derivedMethod()

\`\`\`ts
derivedMethod(): string
\`\`\`

#### Returns

\`string\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile disposable class: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: DisposableClass

## Implements

- \`Disposable\`

## Constructors

### new DisposableClass()

> **new DisposableClass**(): [\`DisposableClass\`](DisposableClass.md)

#### Returns

[\`DisposableClass\`](DisposableClass.md)

## Methods

### \\[dispose\\]()

> **\\[dispose\\]**(): \`void\`

#### Returns

\`void\`

#### Implementation of

\`Disposable.[dispose]\`

#### Source

[classes.ts:1](http://source-url)
"
`;

exports[`Class Reflection should compile hierarchy for BaseClass: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: BaseClass

## Extended by

- [\`ChildClassA\`](ChildClassA.md)
- [\`ChildClassB\`](ChildClassB.md)

## Constructors

### new BaseClass()

> **new BaseClass**(): [\`BaseClass\`](BaseClass.md)

#### Returns

[\`BaseClass\`](BaseClass.md)
"
`;

exports[`Class Reflection should compile hierarchy for ChildClassA: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: ChildClassA

## Extends

- [\`BaseClass\`](BaseClass.md)

## Extended by

- [\`GrandChildClassA\`](GrandChildClassA.md)
- [\`GrandChildClassB\`](GrandChildClassB.md)

## Constructors

### new ChildClassA()

> **new ChildClassA**(): [\`ChildClassA\`](ChildClassA.md)

#### Returns

[\`ChildClassA\`](ChildClassA.md)

#### Inherited from

[\`BaseClass\`](BaseClass.md).[\`constructor\`](BaseClass.md#constructors)
"
`;

exports[`Class Reflection should compile hierarchy for GrandChildClassA: (Output File Strategy "members") (Option Group "1") 1`] = `
"# Class: GrandChildClassA

## Extends

- [\`ChildClassA\`](ChildClassA.md)

## Constructors

### new GrandChildClassA()

> **new GrandChildClassA**(): [\`GrandChildClassA\`](GrandChildClassA.md)

#### Returns

[\`GrandChildClassA\`](GrandChildClassA.md)

#### Inherited from

[\`ChildClassA\`](ChildClassA.md).[\`constructor\`](ChildClassA.md#constructors)
"
`;
